#!/bin/bash

usage() {
	echo "Smail v0.1.0: Send or read emails from your terminal."
	echo ""
	echo "Usage: smail [options] [command]"
	echo ""
	echo "Options:"
	echo "  -v		verbose output"
	echo "  -h		show this help"
	echo "  --help	show this help"
	echo "  --version	show version info"
	echo ""
	echo "Commands:"
	echo "  send		runs the send email interface"
	echo "  read		runs the read email CLI, default"
	echo "  config	runs the configuration script, also on first run"
	echo "  help		show this help"
	echo ""
	echo "Options for send command:"
	echo "  -t,--to	list of emails to send to (comma separated)"
	echo "  -s,--subject	email subject"
	echo "  --cc		carbon copy list of emails"	
	echo "  --cco		hidden carbon copy list of emails"
	echo "  -f,--file	file to be used as body"
	echo ""	
	echo "Examples:"
	echo "  smail config	Run the configuration script"
	echo "  smail		Read emails"
	echo ""
	echo "Report bugs to: bleemayer@gmail.com"
	echo "Home page: <https://www.github.com/blmayer/smail/>"
	echo "General help: <https://www.github.com/blmayer/smail/wiki>"
}

show_version() {
	echo "smail 0.5.0"
	echo "Copyright (C) 2021 Brian Mayer."
	echo "License MIT: MIT License <https://opensource.org/licenses/MIT>"
	echo "THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,"
	echo "EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF"
	echo "MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT."
	echo ""
	echo "Written by Brian Lee Mayer."
}

read_opts() {
	for arg in "$@"
	do
		case $1 in
			"-v")
				debug=1
				;;
			"-h" | "help" | "--help")
				usage
				exit 0
				;;
			"--version")
				show_version
				exit 0
				;;
			"send")
				op="send"
				;;
			"read")
				op="read"
				;;
			"config")
				configure
				exit 0
				;;
			"-t"|"--to")
				shift
				to="$1"
				;;
			"--cc")
				shift
				cc="$1"
				;;
			"--cco")
				shift
				cco="$1"
				;;
			"-s"|"--subject")
				shift
				subj="$1"
				;;
			"-f"|"--file")
				shift
				body="$1"
				;;
			"")
				break
				;;
			*)
				echo "Unrecognized option $arg"
				usage
				exit 1
				;;
		esac
		shift
	done
}

configure() {
	echo "Running configuration"
	[ -e "$HOME/.config/smail" ] || mkdir -p "$HOME/.config/smail"

	echo "Enter email:"
	read -r username
	echo "email=$(echo "$username" | base64 )" > "$configfile"

	echo "Enter password:"
	stty -echo
	read -r password
	stty echo
	echo "password=$(echo "$password" | base64 )" >> "$configfile"

	echo "Enter your favorite editor: [vi]"
	# shellcheck disable=SC2039
	read -re editor
	echo "editor=${editor:-vi}" >> "$configfile"
	echo Done
}

send_smtp() {
	[ -e $debug ] || echo "Sending: $*"
	echo "$*" >&${SMTP[1]}
}

add_attachments() {
	echo "Enter file path:"
	# shellcheck disable=SC2039,SC2162
	read -e annex
	if [ -f "$annex" ]; then
		echo "Enter attachment name: [$(basename "$annex")]"
		read -r annexname
		[ "$annexname" = "" ] && annexname="$(basename "$annex")"

		{
			echo "Content-Type: application/octet-stream"
			echo "Content-Transfer-Encoding: base64"
			echo "Content-Disposition: attachment;"
			echo " filename= \"$annexname\""
			echo ""
		} >> $cachedir/temp
		base64 "$annex" >> $cachedir/temp
		[ -e $debug ] || echo "Added $annex with name: $annexname"
	else
		echo "ERROR: File not found!"
	fi

	echo "Add another attachment(s)? [y/N]"
	read -r another
	[ "$another" = "y" ] && { echo "--$1" >> $cachedir/temp; add_attachments "$1"; }
}

get_rcpt() {
	echo "$to" | cut -d ',' -f "$1"
}

compose() {
	[[ -z "$to" ]] && {
		echo "Type recipient(s) (comma separated):"
		read -r to

		echo "Type Cc(s): (comma separated)"
		read -r cc

		echo "Type Cco(s): (comma separated)"
		read -r cco
	}

	echo "To: $to" > $cachedir/temp
	echo "From: $emaildec" >> $cachedir/temp
	[ -n "$cc" ] && { echo "Cc: $cc" >> $cachedir/temp; to="$to,$cc"; }
	[ -n "$cco" ] && { echo "Cco: $cco" >> $cachedir/temp; to="$to,$cco"; }

	# Transform into list for sending later
	n=$(($(echo "$to" | tr -d -c ',' | wc -c | xargs) + 1))

	[[ -z "$subj" ]] && {
		echo "Type subject:"
		read -r subj
	}
	echo "Subject: $subj" >> $cachedir/temp

	[ -e $debug ] || echo "Email fields:"
	[ -e $debug ] || cat $cachedir/temp

	boundary="$(date | tr " :-" "wUX")"
	{
		echo "MIME-Version: 1.0"
		echo "Content-Type: multipart/mixed;"
		echo " boundary= \"$boundary\""
		echo ""
	
		echo "--$boundary"
		echo 'Content-Type: text/plain; charset=US-ASCII'
		echo ""
	} >> $cachedir/temp

	if [[ -e "$body" ]]
	then
		cp "$body" $cachedir/body
	else
		$editor $cachedir/body
	fi

	sed 's/^.$/../' $cachedir/body | fold -w 72 -s >> $cachedir/temp
	[ -e $debug ] || echo "Email body:"
	[ -e $debug ] || cat $cachedir/body
	rm $cachedir/body

	echo "" >> $cachedir/temp
	echo "--$boundary" >> $cachedir/temp

	[ -e "$body" ] || {
		echo "Insert attachment(s)? [y/N]"
		read -r attach
		[ "$attach" = "y" ] && add_attachments "$boundary"
		echo "--$boundary--" >> $cachedir/temp
	}
}

loop_smtp() {
	case "$state" in
	0)
		[ -e $debug ] || echo "logging in"
		send_smtp "ehlo smtp.gmail.com"
		state=1
		;;
	esac

	[ -e $debug ] || echo "listening"
	while read -r -u ${SMTP[0]} msg
	do
		[ -e $debug ] || echo "received: $msg"
		case $msg in
			"221 2.0.0"*)
				retry
				;;

			"250-"*)
				;;

			"250 SMTPUTF8"*)
				[ -e $debug ] || echo logging in
				state=3
				send_smtp "auth login"
				;;

			"334 VXNlcm5hbWU6"*)
				[ -e $debug ] || echo sending email
				state=4
				send_smtp "$email"
				;;
			"334 UGFzc3dvcmQ6"*)
				[ -e $debug ] || echo sending password
				state=5
				send_smtp "$password"
				;;
			"235 2.7.0"*)
				[ -e $debug ] || echo "logged in"
				state=6
				send_smtp 'mail from: <'"$emaildec"'>'
				;;
			"250 2.0.0"*)
				state=10
				rm $cachedir/temp
				break
				;;
			"250 2.1.0"*)
				[ -e "$debug" ] || get_rcpt "$n"
				state=7
				send_smtp 'rcpt to: <'"$(get_rcpt $n)"'>'
				n=$((n - 1))
				;;
			"250 2.1.5"*)
				if [ ! $n = 0 ]
				then
					[ -e $debug ] || get_rcpt "$n"
					send_smtp 'rcpt to: <'"$(get_rcpt $n)"'>'
					n=$((n - 1))
				else
					[ -e $debug ] || echo "data"
					state=8
					send_smtp "data"
				fi
				;;
			"354  Go ahead"*)
				state=9
				cat $cachedir/temp >&${SMTP[1]}
				send_smtp '.'
				;;
			"451 4.4.2 Timeout"*)
				[ -e $debug ] || echo "Connection closed"
				break
				;;
			"501 5.5.2 Cannot Decode response"*)
				state=3
				retry
		 		;;
			"502 5.5.1 Unrecognized command"*)
				retry
				;;
			"503 5.5.1 MAIL first"*)
				state=6
				retry
				;;
			"530-5.7.0"*)
				;;
			"530 5.7.0"*)
				state=3
				retry
				;;
			"535 5.7.8"*)
				state=3
				retry
				;;
			"553 5.1.3"*)
				retry
				;;
			"554 5.7.0"*)
				break
				;;
			"555 5.5.2 Syntax error"*)
				echo "FATAL ERROR email not sent"
				break
				;;
			*)
				[ -e $debug ] || echo "Unrecognized message"
				break
				;;
		esac
	done
}

### ---- IMAP Stuff ------------------------------------------------------ ###

detect_encoding() {
	case "$1" in
	"=?iso-8859-1?Q?"*)
		echo "iso-8859-1"
		;;
	"=?utf-8?q?"* | "=?utf-8?Q?"* | "=?UTF-8?q?"*)
		echo "utf-8"
		;;
	"=?UTF-8?B?"* | "=?utf-8?B?"*)
		echo "utf-8/base64"
		;;
	esac
}

decode_string() {
	# shellcheck disable=SC1112
	enc="$(detect_encoding $@)"

	case "$enc" in
	"iso-8859-1")
		echo "$@" | sed -e 's/=?iso-8859-1?Q?//Ig' \
		-e 's/?=//g' \
		-e 's/=E7/ç/g' \
		-e 's/=ED/í/g' \
		-e 's/_/ /g' \
		-e 's/=E3/ã/g'
		;;
	"utf-8")
		echo "$@" | sed -e 's/.*=?utf-8?q?//Ig' \
		-e 's/?=//g' \
		-e 's/=F0=9F=8F=AD=C2=A0/🏭/g' \
		-e 's/=C2=A0=F0=9F=91=87/👇/g' \
		-e 's/=F0=9F=94=A5/🔥/g' \
		-e 's/=e2=80=93/-/g' \
		-e 's/=E2=80=99/’/g' \
		-e 's/=CE=94/Δ/g' \
		-e 's/=C3=BA/ú/g' \
		-e 's/=C3=B5/õ/g' \
		-e 's/=C3=B4/ô/g' \
		-e 's/=C3=B3/ó/g' \
		-e 's/=C3=96/Ö/g' \
		-e 's/=C3=AD/í/g' \
		-e 's/=C3=A9/é/g' \
		-e 's/=C3=AA/ê/g' \
		-e 's/=C3=A7/ç/g' \
		-e 's/=C3=A3/ã/g' \
		-e 's/=C3=A2/â/g' \
		-e 's/=C3=A1/á/g' \
		-e 's/=C3=A0/à/g' \
		-e 's/=3F/?/g' \
		-e 's/=2D/-/g' \
		-e 's/=2C/,/g' \
		-e 's/=20/ /g' \
		-e 's/=20/ /g' \
		-e 's/=20/ /g' \
		-e "s/=27/\\'/g" \
		-e 's/=28/(/g' \
		-e 's/=29/)/g' \
		-e 's/=21/!/g' \
		-e 's/_/ /g' \
		-e 's/=20/ /g'
		;;
	"utf-8/base64")
		echo "$@" | sed -e 's/=?UTF-8?B?//Ig' \
		-e 's/?=//g' | base64 -d
		;;
	*)
		echo "$@"
		;;
	esac
}

send_imap() {
	seq="$(printf '%d' $((seq+1)))"

	[ -e $debug ] || echo "Sending: a$seq $*"
	echo "a$seq $*" >&${IMAP[1]}
}

auth_imap() {
	[ -e $debug ] || echo "Authenticating"
	send_imap "login $emaildec $passworddec"

	while read -r -u ${IMAP[0]} msg
	do
		[ -e $debug ] || echo "received: $msg"
		case "$msg" in
		"a$seq OK"*)
			return 1
			break
			;;
	
		"a$seq BAD"*)
			break
			;;
		esac
	done

	return 0
}

select_inbox() {
	[ -e $debug ] || echo "Selecting inbox"
	send_imap "select inbox"
}

reply_email() {
	echo "Reply? [y/N]"
	read -r ans
	if [ "$ans" = "y" ]
	then
		while read -r line
		do
			echo "> $line" >> "$cachedir/reply.txt"
		done < "$cachedir/body.txt"
		
		smail send -f "$cachedir/reply.txt"
		rm "$cachedir/reply.txt"
	fi
}

read_content() {
	while read -r -u ${IMAP[0]} msg
	do
		msg="$(tr -d '\r' <<< $msg)"
		[ -e $debug ] || echo "received: $msg"
		[ "$msg" = "$boundary" ] && break

		if [ "$1" = "base64" ]
		then
			decode_string "=?${charset}?q?$(base64 -d <<< "$msg")" >> "$cachedir/body.txt"
		else
			decode_string "=?${charset}?q?$msg" >> "$cachedir/body.txt"
		fi
	done
}

read_body() {
	while read -r -u ${IMAP[0]} msg
	do
		msg="$(tr -d '\r' <<< $msg)"
		[ -e $debug ] || echo "received: $msg"
		case "$msg" in
		"--"*)
			boundary="$msg"
			;;
		"Content-Type:"*)
			ctype="$(cut -d ' ' -f 2 <<< $msg | tr -d ';')"
			charset="$(cut -d '=' -f 2 <<< $msg | tr -d '"')"
			;;
		"Content-Transfer-Encoding:"*)
			ttype="$(sed 's/Content-Transfer-Encoding: \(.*\)/\1/g' <<< $msg)"
			;;
		"")
			[ "$ctype" = "text/plain" ] && read_content "$ttype"
			;;
		"a$seq OK"*)
			break
			;;
		"a$seq BAD"*)
			break
			;;
		esac
	done

	less "$cachedir/body.txt"
	reply_email
	rm "$cachedir/body.txt"
}

read_email() {
	arg="$1"
	[ -z "$arg" ] && echo "Enter id: " && read arg
	send_imap "fetch $arg BODY[TEXT]"
		
	read_body
}

peek_email() {
	arg="$1"
	[ -z "$arg" ] && echo "Enter id: " && read arg
	send_imap "fetch $arg BODY.PEEK[TEXT]"
		
	read_body
}

get_email_info() {
	send_imap "fetch $1 BODY.PEEK[HEADER]"

	while read -r -u ${IMAP[0]} msg
	do
		[ -e $debug ] || echo "received: $msg"
		case "$msg" in
		"a$seq OK"*)
			break
			;;
		'From:'*)
			from="$(sed 's/From: \(.*\) <.*/\1/g' <<< "$msg" | tr -d '"\r')"
			;;
		'Date:'*)
			date="$(sed 's/Date: \(.*\) [+-].*/\1/g' <<< "$msg" | tr -d '\r')"
			;;
		'Subject:'*)
			subj="$(cut -d ' ' -f 2- <<< "$msg" | tr -d '\r')"
			;;
		"a$seq BAD"*)
			break
			;;
		esac
	done

	cols=$(tput cols)
	rest=$((cols - 67))

	date="$(echo "$date" | cut -d ' ' -f 1-6)"
	from="$(echo "$from" | sed 's/ <.*>//')"
	from="$(decode_string "$from")"
	subj="$(decode_string "$subj" | cut -b 1-$rest)"
	
	printf "%-6s %-28s %-30s %s" "$1" "$date" "${from,1,30}" "$subj"
	echo ""
}

fetch_unseen() {
	[ -e $debug ] || echo "Fetching unread mail"
	send_imap "search unseen"

	# Read response
	[ -e $debug ] || echo "Reading response"
	while read -r -u ${IMAP[0]} msg
	do
		[ -e $debug ] || echo "received: $msg"
		case "$msg" in
			'* SEARCH'*)
				res="$(cut -d ' ' -f 3- <<< "$msg" | tr -d '\r')"
				;;
			"a$seq OK"*)
				break
				;;
			"a$seq BAD"*)
				return
				;;
		esac
	done

	# Parsing response
	[ -e $debug ] || echo "Getting individual mails $res"
	echo "id     date received                from                           subject"
	for mail in $res
	do
		[ -e $debug ] || echo "Getting $mail"
		get_email_info "$mail"
	done
}

read_command() {
	echo "Type command:       1) read [id]  2) peek [id]  3) search       4) quit"

	read -r comm args
	case "$comm" in
		"1")
			read_email "$args"
			;;
		"2")
			peek_email "$args"
			;;
		"3" | "search")
			echo "Type search:"
			read -r search
			send_imap "search $search"
			;;
		"4" | "q" | "quit")
			send_imap "LOGOUT"
			state=4
			;;
		*)
			echo "Not an option, type quit to quit"
			;;
	esac
}

function loop_imap() {
	[ -e $debug ] || >&2 echo "Starting listener"
	while :
	do
		[ -e $debug ] || echo "In state $state"
		case $state in
			0)
				if auth_imap
				then
					state=1
				fi
				;;
			1)
				select_inbox
				state=2
				;;
			2)
				fetch_unseen
				state=3
				;;
			3)
				read_command
				;;
			4)
				break
				;;
			-1)
				echo "Error logging in, try again later"
				break
				;;
			*)
				[ -e $debug ] || echo "Unrecognized state"
				;;
		esac
	done 
}

### ---- Main program ---------------------------------------------------- ###

configfile="$HOME/.config/smail/smail.conf"
datadir="$HOME/.local/share/smail"
cachedir="$HOME/.cache/smail"
[ -d "$datadir" ] || mkdir -p "$datadir"
[ -d "$cachedir" ] || mkdir -p "$cachedir"

# Read arguments
read_opts "$@"

# Configuration step
[ -e "$configfile" ] || configure

email=$(grep email "$configfile" | cut -d '=' -f 2,3)
emaildec=$(echo "$email" | base64 -d)
password=$(grep password "$configfile" | cut -d '=' -f 2,3)
passworddec=$(echo "$password" | base64 -d)
editor=$(grep editor "$configfile" | cut -d '=' -f 2)

case "$op" in 
	"send")
		coproc SMTP {
			openssl s_client -quiet \
			-starttls smtp \
			-connect smtp.gmail.com:587 \
			-crlf 2> /dev/null
		}
		state=0
		compose 
		loop_smtp
		;;

	"read" | "")
		[[ $(tput cols) -le 74 ]] && echo "Needs at least 74 columns" && exit
		
		coproc IMAP {
			openssl s_client -quiet -connect imap.gmail.com:993 \
			-crlf 2> /dev/null
		}
		state=0
		loop_imap
		;;
esac
